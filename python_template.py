# get_dynamics.py
#   returns the linear system dynamics for the auv controller to use
#
# ~~ATTENTION:~~
# ~~Auto Generated File: DO NOT MANUALLY MODIFY!~~
#
# Generated by generatePythonDynamics.m matlab script, part of the TAUV-Controls-Matlab repository.
# Generated on: %s
# Generated by: %s
# Repository commit SHA: %s
# Script version: %s
# For vehicle: %s
#
# Vehicle Dynamics Configuration:
#
# Mass: %f
# Buoyancy: %f
# CoG: [%f, %f, %f]
# CoB: [%f, %f, %f]
#
# Inertia Tensor:
# Ixx: %f
# Iyy: %f
# Izz: %f
# Ixy: %f
# Ixz: %f
# Iyz: %f
#
# Damping matrix:
# D_x = %f
# D_y = %f
# D_z = %f
# D_roll = %f
# D_pitch = %f
# D_yaw = %f
#
# Quadratic Damping matrix:
# D2_x = %f
# D2_y = %f
# D2_z = %f
# D2_roll = %f
# D2_pitch = %f
# D2_yaw = %f
#
# Added mass matrix:
# Ma_x = %f
# Ma_y = %f
# Ma_z = %f
# Ma_yaw = %f
# Ma_pitch = %f
# Ma_roll = %f

import numpy as np
from math import sin, cos, tan


def get_dynamics(x):
    # x = [pose, velocity] to linearize about
    # pose is [x,y,z,roll,pitch,yaw] defined in the world frame
    # velocity is [p,q,r,w_x,w_y,w_z] defined in the body frame
    #
    # returns:
    #  - A: linear system matrix
    #  - B: linear control input matrix
    #  - G: feedforward torque matrix
    #
    # system dynamics:
    #  x' = Ax + Bu
    #  u = -K(x) + G
    #  where -K(x) is the control law

    x1 = x[0]
    x2 = x[1]
    x3 = x[2]
    x4 = x[3]
    x5 = x[4]
    x6 = x[5]
    x7 = x[6]
    x8 = x[7]
    x9 = x[8]
    x10 = x[9]
    x11 = x[10]
    x12 = x[11]

    A = np.zeros((12, 12))
    B = np.zeros((12, 6))
    G = np.zeros((6, 1))

%s
%s
%s
    return A, B, G
